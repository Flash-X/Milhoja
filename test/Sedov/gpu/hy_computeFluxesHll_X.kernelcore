${PROTECTIVE_PREAMBLE}

#include "Hydro.h"

${INCLUDE_ALGORITHM_HEADERS}

#include "Flash.h"

${KERNELCORE_ROUTINE_PREFIX} ${NS_PREFIX}computeFluxesHll_X${IMPL_SUFFIX}( $&
                                   ${ARGUMENT_SIGNATURE_tbduFa}            $&
				                                    ) ${BEGIN_KERNELROUTINE}
${DUMMY_ARGUMENT_DECLS_tbduFa}
${KERNELROUTINE_BOILERPLATE}

    Real    sL ${INIT_LOCALVAR_GRATUITOUS_REALZERO};
    Real    sR ${INIT_LOCALVAR_GRATUITOUS_REALZERO};
    Real    sRsL ${INIT_LOCALVAR_GRATUITOUS_REALZERO};
    Real    vn ${INIT_LOCALVAR_GRATUITOUS_REALZERO};
    Real    vL ${INIT_LOCALVAR_GRATUITOUS_REALZERO};
    Real    vR ${INIT_LOCALVAR_GRATUITOUS_REALZERO};
    int     is ${INIT_LOCALVAR_GRATUITOUS_INTZERO};
    int     iL ${INIT_LOCALVAR_GRATUITOUS_INTZERO};
    int     iR ${INIT_LOCALVAR_GRATUITOUS_INTZERO};

    Real    invNewDens ${INIT_LOCALVAR_GRATUITOUS_REALZERO};

${DO_FOR_INTERIOR_XFACES}
                sL = std::min(U(i-1, j, k, VELX_VAR_C) - auxC(i-1, j, k, 0),  $&
                              U(i,   j, k, VELX_VAR_C) - auxC(i,   j, k, 0));
                sR = std::max(U(i-1, j, k, VELX_VAR_C) + auxC(i-1, j, k, 0),  $&
                              U(i,   j, k, VELX_VAR_C) + auxC(i,   j, k, 0));
                sRsL = sR - sL;
                if (sL > 0.0) ${then}
                    vn = U(i-1, j, k, VELX_VAR_C);
                    is = i - 1;
                    iL = i - 1;
                    iR = i - 1;
                ${elseif} (sR < 0.0) ${then}
                    vn = U(i, j, k, VELX_VAR_C);
                    is = i;
                    iL = i;
                    iR = i;
                ${else}
                    vn = 0.5_wp * (  U(i-1, j, k, VELX_VAR_C)  $&
                                   + U(i,   j, k, VELX_VAR_C));
                    is = i;
                    iL = i-1;
                    iR = i;
                    if (vn > 0.0) ${then}
                        --is;
                    ${endif}
                ${endif}

                vL = U(iL, j, k, VELX_VAR_C);
                vR = U(iR, j, k, VELX_VAR_C);
                if (iL == iR) ${then}
                    flX(i, j, k, HYENS_FLUX_C) =   vn * U(is, j, k, DENS_VAR_C);
                    flX(i, j, k, HY_XMOM_FLUX_C) =   vn * U(is, j, k, DENS_VAR_C)  $&
                                                              * U(is, j, k, VELX_VAR_C)  $&
                                                         +      U(is, j, k, PRES_VAR_C);
                    flX(i, j, k, HY_YMOM_FLUX_C) =   vn * U(is, j, k, DENS_VAR_C)  $&
                                                              * U(is, j, k, VELY_VAR_C);
                    flX(i, j, k, HY_ZMOM_FLUX_C) =   vn * U(is, j, k, DENS_VAR_C)  $&
                                                              * U(is, j, k, VELZ_VAR_C);
                    flX(i, j, k, HY_ENER_FLUX_C) =   vn * U(is, j, k, DENS_VAR_C)  $&
                                                              * U(is, j, k, ENER_VAR_C)  $&
                                                         + vn * U(is, j, k, PRES_VAR_C);
                ${else}
                    flX(i, j, k, HYENS_FLUX_C)  = (  sR * vL * U(iL, j, k, DENS_VAR_C)  $&
                                                           - sL * vR * U(iR, j, k, DENS_VAR_C)  $&
                                                           + sR*sL*(   U(iR, j, k, DENS_VAR_C)  $&
                                                                     - U(iL, j, k, DENS_VAR_C)) ) / sRsL;
                    flX(i, j, k, HY_XMOM_FLUX_C)  = (  sR * vL * U(iL, j, k, DENS_VAR_C) * U(iL, j, k, VELX_VAR_C)  $&
                                                           - sL * vR * U(iR, j, k, DENS_VAR_C) * U(iR, j, k, VELX_VAR_C)  $&
                                                           + sR*sL*(   U(iR, j, k, DENS_VAR_C) * U(iR, j, k, VELX_VAR_C)  $&
                                                                     - U(iL, j, k, DENS_VAR_C) * U(iL, j, k, VELX_VAR_C)) )/sRsL;
                    flX(i, j, k, HY_XMOM_FLUX_C)  = $&
                     flX(i, j, k, HY_XMOM_FLUX_C) + (  sR * U(iL, j, k, PRES_VAR_C)  $&
                                                           - sL * U(iR, j, k, PRES_VAR_C) ) /sRsL;
                    flX(i, j, k, HY_YMOM_FLUX_C)  = (  sR * vL * U(iL, j, k, DENS_VAR_C) * U(iL, j, k, VELY_VAR_C)  $&
                                                           - sL * vR * U(iR, j, k, DENS_VAR_C) * U(iR, j, k, VELY_VAR_C)  $&
                                                           + sR*sL*(   U(iR, j, k, DENS_VAR_C) * U(iR, j, k, VELY_VAR_C)  $&
                                                                     - U(iL, j, k, DENS_VAR_C) * U(iL, j, k, VELY_VAR_C)) )/sRsL;
                    flX(i, j, k, HY_ZMOM_FLUX_C)  = (  sR * vL * U(iL, j, k, DENS_VAR_C) * U(iL, j, k, VELZ_VAR_C)  $&
                                                           - sL * vR * U(iR, j, k, DENS_VAR_C) * U(iR, j, k, VELZ_VAR_C)  $&
                                                           + sR*sL*(   U(iR, j, k, DENS_VAR_C) * U(iR, j, k, VELZ_VAR_C)  $&
                                                                     - U(iL, j, k, DENS_VAR_C) * U(iL, j, k, VELZ_VAR_C)) )/sRsL;
                    flX(i, j, k, HY_ENER_FLUX_C)  = (  sR * vL * U(iL, j, k, DENS_VAR_C) * U(iL, j, k, ENER_VAR_C)  $&
                                                           - sL * vR * U(iR, j, k, DENS_VAR_C) * U(iR, j, k, ENER_VAR_C)  $&
                                                           + sR*sL*(   U(iR, j, k, DENS_VAR_C) * U(iR, j, k, ENER_VAR_C)  $&
                                                                     - U(iL, j, k, DENS_VAR_C) * U(iL, j, k, ENER_VAR_C)) )/sRsL;
                    flX(i, j, k, HY_ENER_FLUX_C)  = $&
                     flX(i, j, k, HY_ENER_FLUX_C) + (  sR * vL * U(iL, j, k, PRES_VAR_C)  $&
                                                           - sL * vR * U(iR, j, k, PRES_VAR_C)) / sRsL;
                ${endif}

                flX(i, j, k, HYENS_FLUX_C)  = flX(i, j, k, HYENS_FLUX_C)  *  dtdx
                flX(i, j, k, HY_XMOM_FLUX_C)  = flX(i, j, k, HY_XMOM_FLUX_C)  *  dtdx
                flX(i, j, k, HY_YMOM_FLUX_C)  = flX(i, j, k, HY_YMOM_FLUX_C)  *  dtdx
                flX(i, j, k, HY_ZMOM_FLUX_C)  = flX(i, j, k, HY_ZMOM_FLUX_C)  *  dtdx
                flX(i, j, k, HY_ENER_FLUX_C)  = flX(i, j, k, HY_ENER_FLUX_C)  *  dtdx
${END_DO_FOR_INTERIOR_CELLS}
${END_KERNELROUTINE}

