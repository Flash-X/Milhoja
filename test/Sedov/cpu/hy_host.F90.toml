PROTECTIVE_PREAMBLE='''
#ifndef ENABLE_OPENACC_OFFLOAD
#error "This file should only be compiled if using OpenACC offloading"
#endif
'''

KERNELCORE_ROUTINE_PREFIX='subroutine'
NS_PREFIX='hy_'
IMPL_SUFFIX=''
ARGUMENT_SIGNATURE_buUfff=' lo,hi, Uin, Uout, flX, flY, flZ '
ARGUMENT_SIGNATURE_bUfff=' lo,hi, U, flX, flY, flZ '
ARGUMENT_SIGNATURE_tbduFa=' dt, lo,hi, deltas, U, flX, auxC '

BEGIN_KERNELROUTINE=''' 
      implicit none
#include "constants.h"
'''

DUMMY_ARGUMENT_DECLS_buUfff='''
      integer,        intent(IN),dimension(MDIM)    :: lo, hi
      integer,pointer,intent(IN),dimension(:,:,:,:) :: Uin
      integer,pointer,           dimension(:,:,:,:) :: Uout
      integer,pointer,intent(IN),dimension(:,:,:,:) :: flX
      integer,pointer,intent(IN),dimension(:,:,:,:) :: flY
      integer,pointer,intent(IN),dimension(:,:,:,:) :: flZ
'''

DUMMY_ARGUMENT_DECLS_tbduFa='''
      real,           intent(IN)                    :: dt
      integer,        intent(IN),dimension(MDIM)    :: lo, hi
      real,           intent(IN),dimension(MDIM)    :: deltas
      integer,pointer,intent(IN),dimension(:,:,:,:) :: U
      integer,pointer,           dimension(:,:,:,:) :: flX
      integer,pointer,intent(IN),dimension(:,:,:,:) :: auxC
'''

DUMMY_ARGUMENT_DECLS_bUfff='''
      integer,        intent(IN),dimension(MDIM)    :: lo, hi
      integer,pointer,           dimension(:,:,:,:) :: U
      integer,pointer,intent(IN),dimension(:,:,:,:) :: flX
      integer,pointer,intent(IN),dimension(:,:,:,:) :: flY
      integer,pointer,intent(IN),dimension(:,:,:,:) :: flZ
'''

KERNELROUTINE_BOILERPLATE='''
    integer :: is, js, ks
    integer :: ie, je, ke
    integer :: i, j, k

    is = lo(IAXIS)
    js = lo(JAXIS)
    ks = lo(KAXIS)

    ie = hi(IAXIS)
    je = hi(JAXIS)
    ke = hi(KAXIS)
'''

INIT_LOCALVAR_GRATUITOUS_REALZERO=''
INIT_LOCALVAR_GRATUITOUS_INTZERO=''

DO_FOR_INTERIOR_CELLS='''
    do         k = ks, ke
        do     j = js, je
            do i = is, ie
'''

DO_FOR_INTERIOR_XFACES='''
    do         k = ks, ke
        do     j = js, je
            do i = is, ie+K1D
'''

'&'='&'

END_DO_FOR_INTERIOR_CELLS='''
            end do
        end do
    end do
'''
END_KERNELROUTINE='''
   end subroutine
'''

then = "THEN"
elseif = "ELSE IF"
else = "ELSE"
endif = "END IF"
