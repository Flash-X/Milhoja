Build System reqs
-----------------
[x] There shall exist a lightweight script named `setup.py` that is invoked by the user to set up the build directory with the necessary files to make a test.

[ ] The build tool will determine flags, such as backend libraries and debug levels, based on command line input.

[ ] The build tool will write a log file to the build directory that contains the setup information and all metadata to reproduce the source tree at the time of build (at minimum, commit number and a git diff). The log file can also include extra information, like date and time, username, list of relevant directories, etc.

[ ] The build tool shall automate the process of running a linter and a code coverage checker on code. The linter shall run before compilation (always) and a code coverage report shall be able to be generated after the test is run (if requested).

Makefile specs
--------------
[x] For every platform, users will create and maintain a `Makefile.site`, based on a template, which contains platform-specific flags (e.g. optimization) and paths (e.g. AMReX).
[x] Project maintainers will maintain `Makefile.base` for the files in Runtime and Grid units.
[x] Test creators will maintain `Makefile.test` for each test with the files specific to the test. 
[ ] There exists `Makefile` which gathers site-specific flags, contains other flags based on command line input, and lists the make commands.
[ ] The Makefiles are flexible enough to support the following modes:
    [x] Building the entire test into one executable.
    [ ] Building the Runtime library first, then linking it into the test executable.
    [ ] Linking a prebuilt Runtime library into the test executable.


Build Tool specs
----------------
[x] The script must get the following parameters from command line: build directory, site name, test name.
[ ] The build tool must create the build directory and empty it if it already exists.
[ ] The build tool constructs parameter files (e.g. Flash.h or Flash.par).
[x] The build tool copies the Makefiles and parameter files into the build directory.
[ ] The build tool symlinks all source files into the build directory, so that the object files are put alongside the executable and not polluting the repository. Also, site maintainers do not need to determine a compiler-specific way to handle the object files.
