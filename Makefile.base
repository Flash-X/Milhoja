SHELL=/bin/sh

########################################################
# Makefile flags and defintions

MAKEFILE     = Makefile
# TODO: We don't need to define this and include.  Better to rename this and use
# includes explicitly?  Note that it is *not* an error if one or more of these
# makefiles cannot be found.
MAKEFILES    = $(MAKEFILE) Makefile.site Makefile.test Makefile.setup

include Makefile.site
include Makefile.setup
include Makefile.test

# Default shell commands
RM ?= /bin/rm

# Milhoja uses just the C++11 standard, but AMReX requires C++14.
# Flags can differ by compiler.
# -MMD generates a dependecy list for each file as a side effect
ifeq ($(CXXCOMPNAME),gnu)
CXXFLAGS_STD = -std=c++14
DEPFLAG = -MMD
else ifeq ($(CXXCOMPNAME), pgi)
CXXFLAGS_STD = -std=c++11
DEPFLAG = -MMD
else ifeq ($(CXXCOMPNAME), ibm)
CXXFLAGS_STD = -std=c++11
DEPFLAG = -MMD
else ifeq ($(CXXCOMPNAME), llvm)
CXXFLAGS_STD = -std=c++11
DEPFLAG = -MMD
else
$(info $(CXXCOMPNAME) compiler not yet supported.)
endif
CUFLAGS_STD  = -std=c++11

CXXFLAGS_LIB =
CUFLAGS_LIB  =

# Combine all compiler and linker flags
# TODO: Can we get rid of the AMReX flags when compiling?
ifeq ($(DEBUG),true)
CXXFLAGS = -I$(BUILDDIR) -I$(JSONDIR) -I$(LIB_MILHOJA)/include \
			$(CXXFLAGS_STD) $(CXXFLAGS_DEBUG) $(CXXFLAGS_BASE) \
			$(CXXFLAGS_LIB) $(CXXFLAGS_TEST_DEBUG) $(CXXFLAGS_AMREX)
else
CXXFLAGS = -I$(BUILDDIR) -I$(JSONDIR) -I$(LIB_MILHOJA)/include \
			$(CXXFLAGS_STD) $(CXXFLAGS_PROD) $(CXXFLAGS_BASE) \
           $(CXXFLAGS_LIB) $(CXXFLAGS_TEST_PROD) $(CXXFLAGS_AMREX)
endif
CUFLAGS  = $(CUFLAGS_STD) $(CUFLAGS_PROD) -I$(BUILDDIR) $(CUFLAGS_BASE) \
           $(CUFLAGS_LIB) $(CUFLAGS_TEST) $(CUFLAGS_AMREX)
LDFLAGS  = -L$(LIB_MILHOJA)/lib -lmilhoja $(LIB_AMREX) $(LDFLAGS_TEST) $(LDFLAGS_STD)

ifeq ($(USE_CUDA_BACKEND),true)
CXXFLAGS += -DMILHOJA_USE_CUDA_BACKEND
CUFLAGS  += -DMILHOJA_USE_CUDA_BACKEND
CU_SRCS   = $(CU_SRCS_BASE) $(CU_SRCS_TEST)
else
CU_SRCS   =
endif

ifeq ($(ENABLE_OPENACC_OFFLOAD),true)
CXXFLAGS += $(OACC_FLAGS) -DMILHOJA_ENABLE_OPENACC_OFFLOAD
CUFLAGS  +=               -DMILHOJA_ENABLE_OPENACC_OFFLOAD
LDFLAGS  += $(OACC_FLAGS)
endif

# Add code coverage flags
ifeq ($(CODECOVERAGE), true)
CXXFLAGS += $(CXXFLAGS_COV)
LDFLAGS  += $(LDFLAGS_COV)
endif

# Adjust flags for multithreaded distributor
ifeq ($(THREADED_DISTRIBUTOR),true)
$(info Warning! multi-threaded distributor not fully tested)
AMREXDIR     = $(AMREXDIR_OMP)
CXXFLAGS    += $(OMP_FLAGS) -DUSE_THREADED_DISTRIBUTOR
CUFLAGS     += $(CU_OMP_FLAGS)
endif


# List of sources, objects, and dependencies
C_SRCS    = $(SRCS_BASE) $(SRCS_TEST)
SRCS      = $(C_SRCS) $(CU_SRCS)

C_OBJS    = $(addsuffix .o, $(basename $(notdir $(C_SRCS))))
CU_OBJS   = $(addsuffix .o, $(basename $(notdir $(CU_SRCS))))
OBJS      = $(C_OBJS) $(CU_OBJS)
DEPS      = $(OBJS:.o=.d)

OBJS_TEST = $(CU_OBJS) $(addsuffix .o, $(basename $(notdir $(SRCS_TEST))))
OBJS_BASE = $(addsuffix .o, $(basename $(notdir $(SRCS_BASE))))

# Use vpath as suggested here: http://make.mad-scientist.net/papers/multi-architecture-builds/#single
# This allows all targets to be put a single directory (the build directory) and directs the Makefile to
# search the source tree for the prerequisites.
vpath %.cpp $(sort $(dir $(C_SRCS)))
vpath %.cu  $(sort $(dir $(CU_SRCS)))


##########################################################
# Makefile commands:

.PHONY: default all clean test
default: $(BINARYNAME)
all:     $(BINARYNAME)
test:
	./$(BINARYNAME)

# If code coverage is being build into the test, remove any previous gcda files to avoid conflict.
$(BINARYNAME): $(OBJS_TEST) $(MAKEFILES) $(LIB_MILHOJA)/lib/libmilhoja.a
ifeq ($(CODECOVERAGE), true)
	$(RM) -f *.gcda
endif
	$(CXXCOMP) -o $(BINARYNAME) $(OBJS_TEST) $(LDFLAGS)

%.o: %.cpp $(MAKEFILES)
	$(CXXCOMP) -c $(DEPFLAG) $(CXXFLAGS) -o $@ $<

%.o: %.cu $(MAKEFILES)
	$(CUCOMP) -MM $(CUFLAGS) -o $(@:.o=.d) $<
	$(CUCOMP) -c $(CUFLAGS) -o $@ $<

# Clean removes all intermediate files
clean:
	$(RM) -f *.o
	$(RM) -f *.d
	$(RM) -f *.a
ifeq ($(CODECOVERAGE), true)
	$(RM) -f *.gcno
	$(RM) -f *.gcda
endif
	$(RM) -f lcov_temp.info

.PHONY: coverage
coverage:
ifeq ($(CODECOVERAGE), true)
	$(LCOV) -o lcov_temp.info -c -d .
	$(GENHTML)  -o Coverage_Report lcov_temp.info
else
	$(info Include --coverage in your setup line to enable code coverage.)
endif


# Include dependencies generated by compiler
-include $(DEPS)

