#ifndef FLASH_PAR_H__
#define FLASH_PAR_H__

#include <Milhoja_real.h>
#include <Milhoja_IntVect.h>

namespace rp_Driver {
    // This is how I fake a Driver_computeDt
    constexpr milhoja::Real         DT_AFTER            = 2.0e-5_wp;
    constexpr unsigned int          WRITE_EVERY_N_STEPS = 10000;
}

namespace rp_Io {
    // computeIntegralQuantitiesByBlock run in CPU-only thread team
    // configuration using blocks
    constexpr unsigned int          N_THREADS_FOR_INT_QUANTITIES = 2;
}

namespace rp_Grid {
    constexpr milhoja::Real         X_MIN       = 0.0_wp;
    constexpr milhoja::Real         X_MAX       = 1.0_wp;
    constexpr milhoja::Real         Y_MIN       = 0.0_wp;
    constexpr milhoja::Real         Y_MAX       = 1.0_wp;
    constexpr milhoja::Real         Z_MIN       = 0.0_wp;
    constexpr milhoja::Real         Z_MAX       = 1.0_wp;

    constexpr unsigned int          LREFINE_MAX = 1;

    constexpr unsigned int          NXB = 16;
    constexpr unsigned int          NYB = 16;
    constexpr unsigned int          NZB = 1;

    constexpr unsigned int          N_BLOCKS_X  = 32;
    constexpr unsigned int          N_BLOCKS_Y  = 32;
    constexpr unsigned int          N_BLOCKS_Z  = 1;
}

namespace rp_Runtime {
    constexpr unsigned int          N_THREADS_PER_TEAM     = 4;
    constexpr unsigned int          N_THREAD_TEAMS         = 1;
    constexpr int                   N_STREAMS              = 1;
    constexpr std::size_t           MEMORY_POOL_SIZE_BYTES = 0;
}

namespace rp_Eos {
    constexpr milhoja::Real         GAMMA = 1.4_wp;
}

namespace rp_Hydro {
    // advanceSolution run in CPU-only thread team
    // configuration using blocks
    constexpr unsigned int          N_THREADS_FOR_ADV_SOLN = 2;
}

namespace rp_Simulation {
    const std::string               NAME                         = "sedov";
    const std::string               LOG_FILENAME                 = NAME + ".log";
    const std::string               INTEGRAL_QUANTITIES_FILENAME = NAME + ".dat";

    constexpr  milhoja::Real        T_0       = 0.0_wp;
    constexpr  milhoja::Real        T_MAX     = 0.5_wp;
    constexpr  unsigned int         MAX_STEPS = 1000;
    // When FLASH-X runs Sedov/2D with a dtInit that is too small, it sets
    // dtInit to one-tenth the CFL-limited dt value for Hydro, which is this
    // value.
    constexpr  milhoja::Real        DT_INIT   = 2.8461091707043134e-6_wp;

    // setInitialConditions run in CPU-only thread team
    // configuration using blocks
    constexpr  unsigned int         N_THREADS_FOR_IC = 2;
    constexpr  unsigned int         N_DISTRIBUTOR_THREADS_FOR_IC = 1;

    constexpr unsigned int          N_PROFILE    = 10000;
    constexpr milhoja::Real         P_AMBIENT    = 1.0e-5_wp;
    constexpr milhoja::Real         RHO_AMBIENT  = 1.0_wp;
    constexpr milhoja::Real         EXP_ENERGY   = 1.0_wp;
    constexpr milhoja::Real         MIN_RHO_INIT = 1.0e-20_wp;
    constexpr milhoja::Real         R_INIT       = 0.013671875_wp;
    constexpr milhoja::Real         SMALL_RHO    = 1.0e-10_wp;
    constexpr milhoja::Real         SMALL_P      = 1.0e-10_wp;
    constexpr milhoja::Real         SMALL_T      = 1.0e-10_wp;
    constexpr milhoja::Real         SMALL_E      = 1.0e-10_wp;
    constexpr unsigned int          N_SUB_ZONES  = 7;
    constexpr milhoja::Real         X_CENTER     = 0.5_wp*(rp_Grid::X_MAX - rp_Grid::X_MIN);
    constexpr milhoja::Real         Y_CENTER     = 0.5_wp*(rp_Grid::Y_MAX - rp_Grid::Y_MIN);
    constexpr milhoja::Real         Z_CENTER     = 0.5_wp*(rp_Grid::Z_MAX - rp_Grid::Z_MIN);

    // Value from FLASH-X constants.h
    constexpr milhoja::Real         PI           = 3.1415926535897932384_wp;
#if   NDIM == 1
    constexpr milhoja::Real         vctr         = 2.0_wp * R_INIT;
#elif NDIM == 2
    constexpr milhoja::Real         vctr         = PI * R_INIT*R_INIT;
#else
    constexpr milhoja::Real         vctr         = 4.0_wp / 3.0_wp * PI * R_INIT*R_INIT*R_INIT;
#endif
    constexpr milhoja::Real         P_EXP        = (rp_Eos::GAMMA - 1.0_wp) * EXP_ENERGY / vctr;
    constexpr milhoja::Real         IN_SUBZONES  = 1.0 / milhoja::Real(N_SUB_ZONES);
}

#endif

