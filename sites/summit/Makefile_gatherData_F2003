SHELL=/bin/sh

# TODO: Redo this with more care.  Make certain that template .h/.cpp dependencies are correct

BASE        = gather_data_F2003
MAKEFILE    = Makefile_gatherData_F2003
BASEDIR     = ../..
INCDIR      = $(BASEDIR)/includes
SRCDIR      = $(BASEDIR)/src
TESTBASEDIR = $(BASEDIR)/test/Base
TESTDIR     = $(BASEDIR)/test/GatherDataF2003
AMREXDIR    = $(HOME)/local/pgi_19.9/AMReX_2d
CUDADIR     = $(OLCF_CUDA_ROOT)
PGIDIR      = $(OLCF_PGI_ROOT)/linuxpower/19.9

# Common files
CXX_HDRS   = \
    $(INCDIR)/FArray1D.h \
    $(INCDIR)/FArray4D.h \
    $(INCDIR)/Tile.h \
    $(INCDIR)/TileAmrex.h \
    $(INCDIR)/TileIter.h \
    $(INCDIR)/TileIterAmrex.h \
    $(INCDIR)/Grid_IntVect.h \
    $(INCDIR)/Grid_RealVect.h \
    $(INCDIR)/Grid.h \
    $(INCDIR)/GridAmrex.h \
    $(INCDIR)/Grid_AmrCoreFlash.h \
    $(INCDIR)/actionRoutine.h \
    $(INCDIR)/OrchestrationLogger.h \
    $(INCDIR)/ThreadTeamModes.h \
    $(INCDIR)/ThreadTeamDataType.h \
    $(INCDIR)/ThreadTeam.h \
    $(INCDIR)/ThreadTeamState.h \
    $(INCDIR)/ThreadTeamIdle.h \
    $(INCDIR)/ThreadTeamTerminating.h \
    $(INCDIR)/ThreadTeamRunningOpen.h \
    $(INCDIR)/ThreadTeamRunningClosed.h \
    $(INCDIR)/ThreadTeamRunningNoMoreWork.h \
    $(INCDIR)/DataItem.h \
    $(INCDIR)/DataPacket.h \
    $(INCDIR)/RuntimeElement.h \
    $(INCDIR)/RuntimeAction.h \
    $(INCDIR)/ActionBundle.h \
    $(INCDIR)/Stream.h \
    $(INCDIR)/StreamManager.h \
    $(INCDIR)/Runtime.h \
    $(TESTBASEDIR)/errorEstBlank.h
CU_HDRS   = \
    $(INCDIR)/CudaGpuEnvironment.h \
    $(INCDIR)/CudaDataPacket.h \
    $(INCDIR)/CudaStreamManager.h \
    $(INCDIR)/CudaMemoryManager.h
CXX_SRCS       = \
    $(SRCDIR)/RuntimeElement.cpp \
    $(SRCDIR)/ThreadTeam.cpp \
    $(SRCDIR)/ThreadTeamIdle.cpp \
    $(SRCDIR)/ThreadTeamTerminating.cpp \
    $(SRCDIR)/ThreadTeamRunningOpen.cpp \
    $(SRCDIR)/ThreadTeamRunningClosed.cpp \
    $(SRCDIR)/ThreadTeamRunningNoMoreWork.cpp \
    $(SRCDIR)/FArray1D.cpp \
    $(SRCDIR)/FArray4D.cpp \
    $(SRCDIR)/Tile.cpp \
    $(SRCDIR)/TileAmrex.cpp \
    $(SRCDIR)/Grid_IntVect.cpp \
    $(SRCDIR)/Grid_RealVect.cpp \
    $(SRCDIR)/DataPacket.cpp \
    $(SRCDIR)/Grid.cpp \
    $(SRCDIR)/GridAmrex.cpp \
    $(SRCDIR)/Grid_AmrCoreFlash.cpp \
    $(SRCDIR)/OrchestrationLogger.cpp \
    $(SRCDIR)/MoverUnpacker.cpp \
    $(SRCDIR)/StreamManager.cpp \
    $(SRCDIR)/Runtime.cpp \
    $(SRCDIR)/tile_fi.cpp \
    $(SRCDIR)/grid_fi.cpp \
    $(SRCDIR)/orchestration_runtime_fi.cpp \
    $(TESTBASEDIR)/errorEstBlank.cpp
CU_SRCS       = \
    $(SRCDIR)/CudaGpuEnvironment.cu \
    $(SRCDIR)/CudaDataPacket.cu \
    $(SRCDIR)/CudaStreamManager.cu \
    $(SRCDIR)/CudaMemoryManager.cu
F2003_SRCS       = \
    $(SRCDIR)/tile_mod.F90 \
    $(SRCDIR)/Grid_interface.F90 \
    $(SRCDIR)/Orchestration_interface.F90 \
    $(TESTDIR)/Simulation_interface.F90 \
    $(TESTDIR)/Analysis_interface.F90 \
    $(TESTDIR)/Physics_interface.F90 \
    $(TESTDIR)/Simulation_initBlock.F90 \
    $(SRCDIR)/Grid_data.F90 \
    $(SRCDIR)/Orchestration_data.F90 \
    $(TESTDIR)/Analysis_data.F90 \
    $(TESTDIR)/Physics_data.F90 \
    $(SRCDIR)/Grid_init.F90 \
    $(SRCDIR)/Grid_initDomain.F90 \
    $(SRCDIR)/Grid_getDomainBoundBox.F90 \
    $(SRCDIR)/Grid_getDeltas.F90 \
    $(SRCDIR)/Grid_getCellCoords.F90 \
    $(SRCDIR)/Grid_finalize.F90 \
    $(SRCDIR)/Orchestration_init.F90 \
    $(SRCDIR)/Orchestration_finalize.F90 \
    $(SRCDIR)/Orchestration_executeTasks.F90 \
    $(TESTDIR)/Driver_evolveFlash.F90 \
    $(TESTDIR)/Analysis_computeErrors.F90 \
    $(TESTDIR)/Physics_op1_executeTask1_Tile.F90 \
    $(TESTDIR)/Physics_op1_executeTask2_Tile.F90 \
    $(TESTDIR)/Physics_op1_executeTask3_Tile.F90

OBJS       = $(addsuffix .o, $(basename $(CXX_SRCS)))
CUOBJS     = $(addsuffix .o, $(basename $(CU_SRCS)))
MODS       = $(addsuffix .mod, $(basename $(F2003_SRCS)))
COMMAND    =  $(BASE).x

CXX        = mpic++
CXXFLAGS   = -g -O0 -std=c++11 -I$(INCDIR) -I$(TESTDIR) -I$(TESTBASEDIR) -I$(AMREXDIR)/include -DUSE_CUDA_BACKEND
CXXWARNS   =

CU         = nvcc
CUFLAGS    = -ccbin=pgc++ -g -O0 -std=c++11 -m64 -gencode arch=compute_70,code=sm_70 -I$(PGIDIR)/include -I$(INCDIR) -I$(TESTDIR) -I$(AMREXDIR)/include -DUSE_CUDA_BACKEND -D__PGI
CUWARNS    =

F2003      = mpif90
F2003FLAGS = -g -O0 -cpp -I$(TESTDIR) -I$(AMREXDIR)/include -r8 -i4 -DUSE_CUDA_BACKEND
F2003WARNS =

LIBS       = -lpthread -lstdc++ -lamrex -lcudart
LDFLAGS    = -L$(AMREXDIR)/lib -L$(CUDADIR)/lib64 -L$(PGIDIR)/lib
 
ifdef DEBUG
CXXFLAGS := $(CXXFLAGS) -DDEBUG_RUNTIME
endif

all:    $(COMMAND)

.SUFFIXES:
.SUFFIXES: .o .cpp .cu .mod .F90

$(COMMAND): $(OBJS) $(CUOBJS) $(MODS) $(MAKEFILE) 
	$(F2003) -o $(COMMAND) $(OBJS) $(CUOBJS) $(MODS) $(LDFLAGS) $(LIBS)

.cpp.o: $(CXX_HDRS) $(MAKEFILE)
	$(CXX) -c $(CXXFLAGS) $(CXXWARNS) -o $@ $<

.cu.o: $(CU_HDRS) $(MAKEFILE)
	$(CU) -c $(CUFLAGS) $(CUWARNS) -o $@ $<

# Move buildInfo.inc out so that we just write it once
# Also, find commands that are universal
.F90.mod: $(CXX_SRC) $(CXX_HDRS) $(MAKEFILE)
	@/bin/rm -f $(TESTDIR)/buildInfo.inc
	@printf "character(*), parameter :: PROJECT_GIT_REPO_NAME = \'" >> $(TESTDIR)/buildInfo.inc
	@printf "%s\'\n" `git config --get remote.origin.url` >> $(TESTDIR)/buildInfo.inc

	@printf "character(*), parameter :: PROJECT_GIT_REPO_VER = \'" >> $(TESTDIR)/buildInfo.inc
	@printf "%s\'\n" `git -C $(SRCDIR) describe --always` >> $(TESTDIR)/buildInfo.inc

	@printf "character(*), parameter :: BUILD_DATETIME = \'" >> $(TESTDIR)/buildInfo.inc
	@printf "%s\'\n" `date +"%Y-%m-%dT%H:%M:%S%z"` >> $(TESTDIR)/buildInfo.inc

	@printf "character(*), parameter :: HOSTNAME = \'" >> $(TESTDIR)/buildInfo.inc
	@printf "%s\'\n" `hostname` >> $(TESTDIR)/buildInfo.inc

#	@printf "character(*), parameter :: MACHINE_INFO = \'" >> $(TESTDIR)/buildInfo.inc
#	@printf "%s\'\n" `$(CXX) -dumpmachine` >> $(TESTDIR)/buildInfo.inc

	@printf "character(*), parameter :: CXX_COMPILER = \'" >> $(TESTDIR)/buildInfo.inc
	@printf "%s\'\n" $(CXX) >> $(TESTDIR)/buildInfo.inc

#	@printf "character(*), parameter :: CXX_COMPILER_VERSION = \'" >> $(TESTDIR)/buildInfo.inc
#	@printf "%s\'\n" `$(CXX) -dumpversion` >> $(TESTDIR)/buildInfo.inc

	@printf "character(*), parameter :: F2003_COMPILER = \'" >> $(TESTDIR)/buildInfo.inc
	@printf "%s\'\n" $(F2003) >> $(TESTDIR)/buildInfo.inc

#	@printf "character(*), parameter :: F2003_COMPILER_VERSION = \'" >> $(TESTDIR)/buildInfo.inc
#	@printf "%s\'\n" `$(F2003) -dumpversion` >> $(TESTDIR)/buildInfo.inc

	$(F2003) -c $(F2003FLAGS) $(F2003WARNS) -o $@ $<

clean:
	/bin/rm -f $(COMMAND)
	/bin/rm -f *.mod
	/bin/rm -f $(SRCDIR)/*.o
	/bin/rm -f $(SRCDIR)/*.mod
	/bin/rm -f $(TESTDIR)/buildInfo.inc
	/bin/rm -f $(TESTDIR)/*.o
	/bin/rm -f $(TESTDIR)/*.mod

